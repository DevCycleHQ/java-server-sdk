plugins {
    id 'idea'
    id 'eclipse'
    id 'de.undercouch.download' version '5.2.0'
    id 'java'
    id 'java-library'
    id 'maven'
    id 'maven-publish'
    id 'signing'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

group = "com.devcycle"
archivesBaseName = "java-server-sdk"
version = "1.1.0"

jar {
    manifest {
        attributes 'Implementation-Version': version
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'DevCycle Java Server SDK'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Server side SDK to interact with DevCycle.'
                url 'https://devcycle.com'

                scm {
                    connection 'scm:git:git://github.com/DevCycleHQ/java-server-sdk.git'
                    developerConnection 'scm:git:ssh://github.com:DevCycleHQ/java-server-sdk.git'
                    url 'https://github.com/DevCycleHQ/java-server-sdk'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id 'devcycle'
                        name 'DevCycle Engineering'
                        email 'support@devcycle.com'
                        organization 'DevCycle'
                    }
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_1_8

install {
    repositories.mavenInstaller {
        pom.artifactId = 'java-server-sdk'
    }
}

publishing {
    publications {
        myLibrary(MavenPublication) {
            from components.java
        }
    }
}

task execute(type:JavaExec) {
    main = System.getProperty('mainClass')
    classpath = sourceSets.main.runtimeClasspath
}

def wasmResourcePath = "$projectDir/src/main/resources"
def wasmVersion = "1.1.2"
def wasmUrl = "https://unpkg.com/@devcycle/bucketing-assembly-script@$wasmVersion/build/bucketing-lib.release.wasm"
task downloadDVCBucketingWASM(type: Download) {
    src wasmUrl
    dest wasmResourcePath
    doLast {
        println "Completed DVC Bucketing WASM Download to $wasmResourcePath"
    }
}

build {
    dependsOn downloadDVCBucketingWASM
}

ext {
    retrofit_version = "2.9.0"
    jackson_version = "2.13.3"
    swagger_annotations_version = "2.2.0"
    lombok_version = "1.18.24"
    okhttp_version = "4.9.3"
    wasmtime_version = "0.11.0"

    junit_version = "4.13.2"
    mockito_core_version = "4.6.1"
}

dependencies {
    annotationProcessor("org.projectlombok:lombok:$lombok_version")

    implementation("com.squareup.okhttp3:okhttp:$okhttp_version")

    implementation("com.squareup.retrofit2:retrofit:$retrofit_version") {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
    }
    implementation("com.squareup.retrofit2:converter-jackson:$retrofit_version") {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
    }
    api("com.fasterxml.jackson.core:jackson-databind:$jackson_version")
    implementation("io.swagger.core.v3:swagger-annotations:$swagger_annotations_version")

    implementation ("io.github.kawamuray.wasmtime:wasmtime-java:$wasmtime_version")

    compileOnly("org.projectlombok:lombok:$lombok_version")

    testAnnotationProcessor("org.projectlombok:lombok:$lombok_version")
    testImplementation("junit:junit:$junit_version")
    testImplementation("org.mockito:mockito-core:$mockito_core_version")
    testImplementation("com.squareup.retrofit2:retrofit-mock:$retrofit_version")
    testCompileOnly("org.projectlombok:lombok:$lombok_version")
}
