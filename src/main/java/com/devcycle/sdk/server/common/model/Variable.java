/*
 * DevCycle Bucketing API
 * Documents the DevCycle Bucketing API which provides and API interface to User Bucketing and for generated SDKs.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.devcycle.sdk.server.common.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class Variable<T> {

  @JsonIgnoreProperties(ignoreUnknown = true)

  @Schema(required = true, description = "unique database id")
  @JsonProperty("_id")
  private String id;

  @Schema(required = true, description = "Unique key by Project, can be used in the SDK / API to reference by 'key' rather than _id.")
  private String key;

  @Schema(required = true, description = "Variable value can be a string, number, boolean, or JSON")
  private T value;

  @Schema(required = true, description = "Variable type")
  private TypeEnum type;

  @JsonIgnore
  @Builder.Default
  private Boolean isDefaulted = false;

  @JsonIgnore
  private String reasonUsingDefaultValue;

  public enum TypeEnum {
    STRING("String"),
    BOOLEAN("Boolean"),
    NUMBER("Number"),
    JSON("JSON");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }
}
